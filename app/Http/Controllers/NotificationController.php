<?php

namespace App\Http\Controllers;

use App\Firebase;
use App\Notification;
use App\UserNotification;
use Auth;
use Carbon\Carbon;

class NotificationController extends Controller
{
    public function trial()
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "http://linguistix.devlopment:8084/send?message=ssdsd");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
    }

    public function send()
    {
        //        dd($message);
        $data = [];
        $data['partialView'] = 'sockets.send';
        //@@some-data@@
        $data['message'] = $_GET['message'];
//        $data['user_id'] = $request->user_id;
        return view('sockets.base', $data);
    }

    //Create Firebase token
    public function createToken($token)
    {
        Firebase::where('user_id', Auth::user()->id)->delete();
        $new_token = new Firebase();
        $new_token->user_id = Auth::user()->id;
        $new_token->token = $token;
        $new_token->save();
    }

    public function read_notifications()
    {
        $user_notifications = UserNotification::where('user_id', Auth::user()->id)
            ->where(function ($query) {
                $query->Where('role_id', Auth::user()->getLoggedInRoleID())->orWhereNull('role_id');
            })->get();
        foreach ($user_notifications as $user_notification) {
            self::read_notification($user_notification->id);
        }
    }

    public static function read_notification($id)
    {
        $user_notification = UserNotification::findOrFail($id);
        $notification = Notification::where('id', $user_notification->notification_id)->first();
        $approval_user_notifications = UserNotification::where('notification_id', $notification->id)
            ->update(['read' => 1, 'read_at' => Carbon::now()->toDateTimeString()]);
    }

    public static function sendBrowserNotification($message, $notify_user_id)
    {
        $user = Auth::user();
        $notify_user_token = Firebase::where('user_id', $notify_user_id)->first();
        if ($notify_user_token) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_URL, "https://fcm.googleapis.com/fcm/send");
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"notification\": {\n    \"title\": \"$user->name $message\",\n    \"body\": \"5 to 1\"\n\n  },\n  \"to\": \"$notify_user_token->token\"\n}");
            curl_setopt($ch, CURLOPT_POST, 1);

            $headers = array();
            $headers[] = "Authorization: key=AAAAMLlhlhc:APA91bF36oex9h0ebceL92I_KglvBn5kFtv5UE84dfEohK4IYVoaOcYhY2C-B62XxhoTdrXvWnErMQBwaZfUpGvK7CcGBbZYTkxEzXooGMWzCYtLE8qT5F9UEqYTFWQiWZrl45FLOJGI";
            $headers[] = "Content-Type: application/json";
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

            $result = curl_exec($ch);
            if (curl_errno($ch)) {
                echo 'Error:' . curl_error($ch);
            }
            curl_close($ch);
        }
    }
}
